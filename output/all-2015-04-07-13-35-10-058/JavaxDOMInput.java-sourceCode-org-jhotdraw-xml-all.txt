 * @(#)JavaxDOMInput.java  2.1  2006-07-08
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
 * DOMInput.
 * @author  Werner Randelshofer
 * @version 2.1 2006-07-08 Support objects which don't have an ID.
 * <br>2.0 2006-06-10 Support for Enum and double array objects added.
 * <br>1.0 February 17, 2004 Created.
 
     * This map is used to unmarshall references to objects to
     * the XML DOM. A key in this map is a String representing a marshalled
     * reference. A value in this map is an unmarshalled Object.
     
     * The document used for input.
     
     * The current node used for input.
     
     * The factory used to create objects from XML tag names.
     
     * Returns the tag name of the current element.
     
     * Gets an attribute of the current element of the DOM Document.
     
     * Gets the text of the current element of the DOM Document.
     
     * Gets the text of the current element of the DOM Document.
     
     * Gets an attribute of the current element of the DOM Document and of
     * all parent DOM elements.
     
     * Gets an attribute of the current element of the DOM Document.
     
     * Gets an attribute of the current element of the DOM Document.
     
     * Gets an attribute of the current element of the DOM Document.
     
     * Returns the number of child elements of the current element.
     
     * Returns the number of child elements with the specified tag name
     * of the current element.
     
     * Opens the element with the specified index and makes it the current node.
     
     * Opens the last element with the specified name and makes it the current node.
     
     * Opens the element with the specified name and index and makes it the
     * current node.
     
     * Closes the current element of the DOM Document.
     * The parent of the current element becomes the current element.
     * @exception IllegalArgumentException if the provided tagName does
     * not match the tag name of the element.
     
        if (! ((Element) current).getTagName().equals(tagName)) {
            throw new IllegalArgumentException("Attempt to close wrong element:"+tagName +"!="+((Element) current).getTagName());
        }
     * Reads an object from the current element.
     
     * Reads an object from the current element.
     
 Keep track of objects which have an ID
