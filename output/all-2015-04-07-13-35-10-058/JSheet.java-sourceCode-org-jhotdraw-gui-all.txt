 * @(#)JSheet.java  2.0  2006-07-02
 * Copyright (c) 2005-2006 Werner Randelshofer
 * Staldenmattweg 2, Immensee, CH-6405, Switzerland.
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * Werner Randelshofer. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Werner Randelshofer.
 
 * JSheet is a document modal dialog which is displayed below the title bar
 * of a JFrame.
 * <p>
 * A JSheet blocks input on its owner window, while it is visible.
 * <p>
 * Unlike application modal dialogs, the show method of a JSheet does return
 * immediately, when the JSheet has become visible. Applications need to use
 * a SheetListener to get the return value of a JSheet.
 * <p>
 * Requires Java 1.4.
 * <p>
 * Caveats: We are using an unsupported API call to make the JSheet translucent.
 * This API may go away in future versions of the Macintosh Runtime for Java.
 * In such a case, we (hopefully) just end up with a non-opaque sheet.
 * @author  Werner Randelshofer
 * @version 1.4 2006-07-02 Rewritten for independent use of the Quaqua Look and
 * Feel.
 * <br>1.3 2006-04-15 Request focus. Show window title of parent window
 * when displaying sheet as a regular dialog window. 
 * <br>1.2 2006-02-18 Set window decoration style to NONE. Get sheet border
 * from UIManager.
 * <br>1.1 2005-10-15 Bring sheet to front when showing an option pane
 * or a filechooser. Method showMessageSheet with a SheetListener added.
 * <br>1.0.1 2005-10-08 Clear value.
 * <br>1.0 September 25, 2005 Created.
 
     * Event listener list.
     
     * This handler is used to handle movements of the owner.
     * If the owner moves, we have to change the location of the sheet as well.
     
     * If this is non-null, we put the owner to the specified location,
     * when the sheet is hidden.
     
     * We need to keep track of the old owner position, in order to avoid
     * processing duplicate owner moved events.
     
     * Focus owner on the owner window, before the sheet is shown.
     
     * This is set to true, when the listeners for the JSheet are installed on
     * the parent component.
     
     * If this is set to true, the JSheet uses a transition effect when shown
     * and when hidden.
     
     * Creates a new JSheet.
     
     * Creates a new JSheet.
     
 We move the sheet when the user moves the owner, so that it
 will always stay centered below the title bar of the owner.
 If the user has moved the owner, we 'forget' the shift back location,
 and don't shift the owner back to the place it was, when we opened
 the sheet.
     * Installs the sheet on the owner.
     * This method is invoked just before the JSheet is shown.
     
 Determine the location for the sheet and its owner while
 the sheet will be visible.
 In case we have to shift the owner to fully display the
 dialog, we remember the shift back position.
 ((JFrame) owner).setResizable(false);
     * Uninstalls the sheet on the owner.
     * This method is invoked immediately after the JSheet is hidden.
     
((JFrame) owner).setResizable(true);
QuaquaUtilities.setWindowAlpha(this, 240);
     * If this is set to true, the JSheet uses a transition effect when shown
     * and when hidden.
     
     * If this returns true, the JSheet uses a transition effect when shown
     * and when hidden.
     
 Reinserted
     * Adds a sheet listener.
     
     * Removes a sheet listener.
     
     * Notify all listeners that have registered interest for
     *   notification on this event type.  The event instance
     *   is lazily created using the parameters passed into
     *   the fire method.
     
     * Notify all listeners that have registered interest for
     *   notification on this event type.  The event instance
     *   is lazily created using the parameters passed into
     *   the fire method.
     
 Guaranteed to return a non-null array
 Process the listeners last to first, notifying
 those that are interested in this event
 Lazily create the event:
     * Notify all listeners that have registered interest for
     *   notification on this event type.  The event instance
     *   is lazily created using the parameters passed into
     *   the fire method.
     
 Guaranteed to return a non-null array
 Process the listeners last to first, notifying
 those that are interested in this event
 Lazily create the event:
     * Displays an option pane as a sheet on its parent window.
     *
     * @param pane The option pane.
     * @param parentComponent The parent of the option pane.
     * @param listener The listener for SheetEvents.
     
     * Brings up a sheet with the options <i>Yes</i>,
     * <i>No</i> and <i>Cancel</i>.
     *
     * @param parentComponent determines the <code>Frame</code> in which the
     *			sheet is displayed; if <code>null</code>,
     *			or if the <code>parentComponent</code> has no
     *			<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     *�@param listener The listener for SheetEvents.
     
     * Brings up a sheet where the number of choices is determined
     * by the <code>optionType</code> parameter.
     *
     * @param parentComponent determines the <code>Frame</code> in which the
     *			sheet is displayed; if <code>null</code>,
     *			or if the <code>parentComponent</code> has no
     *			<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     * @param optionType an int designating the options available on the dialog:
     *                  <code>YES_NO_OPTION</code>, or
     *			<code>YES_NO_CANCEL_OPTION</code>
     *�@param listener The listener for SheetEvents.
     
     * Brings up a sheet where the number of choices is determined
     * by the <code>optionType</code> parameter, where the
     * <code>messageType</code>
     * parameter determines the icon to display.
     * The <code>messageType</code> parameter is primarily used to supply
     * a default icon from the Look and Feel.
     *
     * @param parentComponent determines the <code>Frame</code> in
     *			which the dialog is displayed; if <code>null</code>,
     *			or if the <code>parentComponent</code> has no
     *			<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     * @param optionType an integer designating the options available
     *			on the dialog: <code>YES_NO_OPTION</code>,
     *			or <code>YES_NO_CANCEL_OPTION</code>
     * @param messageType an integer designating the kind of message this is;
     *                  primarily used to determine the icon from the pluggable
     *                  Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *                  <code>JOptionPane.WARNING_MESSAGE</code>,
     *                  <code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     *�@param listener The listener for SheetEvents.
     
     * Brings up a sheet with a specified icon, where the number of
     * choices is determined by the <code>optionType</code> parameter.
     * The <code>messageType</code> parameter is primarily used to supply
     * a default icon from the look and feel.
     *
     * @param parentComponent determines the <code>Frame</code> in which the
     *			dialog is displayed; if <code>null</code>,
     *			or if the <code>parentComponent</code> has no
     *			<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the Object to display
     * @param optionType an int designating the options available on the dialog:
     *                  <code>YES_NO_OPTION</code>,
     *			or <code>YES_NO_CANCEL_OPTION</code>
     * @param messageType an int designating the kind of message this is,
     *                  primarily used to determine the icon from the pluggable
     *                  Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *                  <code>JOptionPane.WARNING_MESSAGE</code>,
     *                  <code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     * @param icon      the icon to display in the dialog
     *�@param listener The listener for SheetEvents.
     
     * Shows a question-message sheet requesting input from the user
     * parented to <code>parentComponent</code>.
     *
     * @param parentComponent  the parent <code>Component</code> for the
     *		dialog
     *�@param listener The listener for SheetEvents.
     
     * Shows a question-message sheet requesting input from the user and
     * parented to <code>parentComponent</code>. The input value will be
     * initialized to <code>initialSelectionValue</code>.
     *
     * @param parentComponent  the parent <code>Component</code> for the
     *		dialog
     * @param message the <code>Object</code> to display
     * @param initialSelectionValue the value used to initialize the input
     *                 field
     *�@param listener The listener for SheetEvents.
     
     * Shows a sheet requesting input from the user parented to
     * <code>parentComponent</code> and message type <code>messageType</code>.
     *
     * @param parentComponent  the parent <code>Component</code> for the
     *			dialog
     * @param message  the <code>Object</code> to display
     * @param messageType the type of message that is to be displayed:
     *                 	<code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *			<code>JOptionPane.WARNING_MESSAGE</code>,
     *                 	<code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     *�@param listener The listener for SheetEvents.
     
     * Prompts the user for input in a sheet where the
     * initial selection, possible selections, and all other options can
     * be specified. The user will able to choose from
     * <code>selectionValues</code>, where <code>null</code> implies the
     * user can input
     * whatever they wish, usually by means of a <code>JTextField</code>.
     * <code>initialSelectionValue</code> is the initial value to prompt
     * the user with. It is up to the UI to decide how best to represent
     * the <code>selectionValues</code>, but usually a
     * <code>JComboBox</code>, <code>JList</code>, or
     * <code>JTextField</code> will be used.
     *
     * @param parentComponent  the parent <code>Component</code> for the
     *			dialog
     * @param message  the <code>Object</code> to display
     * @param messageType the type of message to be displayed:
     *                  <code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *			<code>JOptionPane.WARNING_MESSAGE</code>,
     *                  <code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     * @param icon     the <code>Icon</code> image to display
     * @param selectionValues an array of <code>Object</code>s that
     *			gives the possible selections
     * @param initialSelectionValue the value used to initialize the input
     *                 field
     *�@param listener The listener for SheetEvents.
     
        sheet.addWindowListener(new WindowAdapter() {
           public void windowClosed(WindowEvent evt) {
               sheet.dispose();
           }
        });
     * Brings up an information-message sheet.
     *
     * @param parentComponent determines the <code>Frame</code> in
     *		which the dialog is displayed; if <code>null</code>,
     *		or if the <code>parentComponent</code> has no
     *		<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     
     * Brings up an information-message sheet.
     *
     * @param parentComponent determines the <code>Frame</code> in
     *		which the dialog is displayed; if <code>null</code>,
     *		or if the <code>parentComponent</code> has no
     *		<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     * @param listener This listener is notified when the sheet is dismissed.
     
     * Brings up a sheet that displays a message using a default
     * icon determined by the <code>messageType</code> parameter.
     *
     * @param parentComponent determines the <code>Frame</code>
     *		in which the dialog is displayed; if <code>null</code>,
     *		or if the <code>parentComponent</code> has no
     *		<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     * @param messageType the type of message to be displayed:
     *                  <code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *			<code>JOptionPane.WARNING_MESSAGE</code>,
     *                  <code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     
     * Brings up a sheet that displays a message using a default
     * icon determined by the <code>messageType</code> parameter.
     *
     * @param parentComponent determines the <code>Frame</code>
     *		in which the dialog is displayed; if <code>null</code>,
     *		or if the <code>parentComponent</code> has no
     *		<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     * @param messageType the type of message to be displayed:
     *                  <code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *			<code>JOptionPane.WARNING_MESSAGE</code>,
     *                  <code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     * @param listener This listener is notified when the sheet is dismissed.
     
     * Brings up a sheet displaying a message, specifying all parameters.
     *
     * @param parentComponent determines the <code>Frame</code> in which the
     *			sheet is displayed; if <code>null</code>,
     *			or if the <code>parentComponent</code> has no
     *			<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     * @param messageType the type of message to be displayed:
     *                  <code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *			<code>JOptionPane.WARNING_MESSAGE</code>,
     *                  <code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     * @param icon      an icon to display in the sheet that helps the user
     *                  identify the kind of message that is being displayed
     * @param listener This listener is notified when the sheet is dismissed.
     
     * Brings up a sheet with a specified icon, where the initial
     * choice is determined by the <code>initialValue</code> parameter and
     * the number of choices is determined by the <code>optionType</code>
     * parameter.
     * <p>
     * If <code>optionType</code> is <code>YES_NO_OPTION</code>,
     * or <code>YES_NO_CANCEL_OPTION</code>
     * and the <code>options</code> parameter is <code>null</code>,
     * then the options are
     * supplied by the look and feel.
     * <p>
     * The <code>messageType</code> parameter is primarily used to supply
     * a default icon from the look and feel.
     *
     * @param parentComponent determines the <code>Frame</code>
     *			in which the dialog is displayed;  if
     *                  <code>null</code>, or if the
     *			<code>parentComponent</code> has no
     *			<code>Frame</code>, the sheet is displayed as a dialog.
     * @param message   the <code>Object</code> to display
     * @param optionType an integer designating the options available on the
     *			dialog: <code>YES_NO_OPTION</code>,
     *			or <code>YES_NO_CANCEL_OPTION</code>
     * @param messageType an integer designating the kind of message this is,
     *                  primarily used to determine the icon from the
     *			pluggable Look and Feel: <code>JOptionPane.ERROR_MESSAGE</code>,
     *			<code>JOptionPane.INFORMATION_MESSAGE</code>,
     *                  <code>JOptionPane.WARNING_MESSAGE</code>,
     *                  <code>JOptionPane.QUESTION_MESSAGE</code>,
     *			or <code>JOptionPane.PLAIN_MESSAGE</code>
     * @param icon      the icon to display in the dialog
     * @param options   an array of objects indicating the possible choices
     *                  the user can make; if the objects are components, they
     *                  are rendered properly; non-<code>String</code>
     *			objects are
     *                  rendered using their <code>toString</code> methods;
     *                  if this parameter is <code>null</code>,
     *			the options are determined by the Look and Feel
     * @param initialValue the object that represents the default selection
     *                  for the dialog; only meaningful if <code>options</code>
     *			is used; can be <code>null</code>
     *�@param listener The listener for SheetEvents.
     
 Once window gets focus, set initial focus
Ugly dirty hack: JOptionPane.selectInitialValue() is protected.
So we call directly into the UI. This may cause mayhem,
because we override the encapsulation.
pane.selectInitialValue();
 reset value to ensure closing works properly
 Let the defaultCloseOperation handle the closing
 if the user closed the window without selecting a button
 (newValue = null in that case).  Otherwise, close the sheet.
     * Returns the specified component's toplevel <code>Frame</code> or
     * <code>Dialog</code>.
     *
     * @param parentComponent the <code>Component</code> to check for a
     *		<code>Frame</code> or <code>Dialog</code>
     * @return the <code>Frame</code> or <code>Dialog</code> that
     *		contains the component, or the default
     *         	frame if the component is <code>null</code>,
     *		or does not have a valid
     *         	<code>Frame</code> or <code>Dialog</code> parent
     
     * Displays a "Save File" file chooser sheet. Note that the
     * text that appears in the approve button is determined by
     * the L&F.
     *
     * @param    parent  the parent component of the dialog,
     *			can be <code>null</code>.
     *�@param listener The listener for SheetEvents.
     
     * Displays an "Open File" file chooser sheet. Note that the
     * text that appears in the approve button is determined by
     * the L&F.
     *
     * @param    parent  the parent component of the dialog,
     *			can be <code>null</code>.
     *�@param listener The listener for SheetEvents.
     
     * Displays a custom file chooser sheet with a custom approve button.
     *
     * @param   parent  the parent component of the dialog;
     *			can be <code>null</code>
     * @param   approveButtonText the text of the <code>ApproveButton</code>
     *�@param listener The listener for SheetEvents.
     
 Begin Create Dialog
 End Create Dialog
