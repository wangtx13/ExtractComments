 * @(#)TextAreaFigure.java  2.0.1  2006-02-27
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
�
 
 * A TextAreaFigure contains formatted text.<br>
 * It automatically rearranges the text to fit its allocated display area,
 * breaking the lines at word boundaries whenever possible.<br>
 * The text can contain either LF or CRLF sequences to separate paragraphs,
 * as well as tab characters for table like formatting and alignment.<br>
 * Currently the tabs are distributed at regular intervals as determined by
 * the TabSize property. Tabs align correctly with either fixed
 * or variable fonts.<br>
 * If, when resizing, the vertical size of the display box is not enough to
 * display all the text, TextAreaFigure displays a dashed red line at the
 * bottom of the figure to indicate there is hidden text.<br>
 * TextAreFigure uses all standard attributes for the area Rectangle2D.Double,
 * ie: FillColor, PenColor for the border, FontSize, FontStyle, and FontName,
 * as well as four additional attributes LeftMargin, RightMargin, TopMargin,
 * and TabSize.<br>
 * <p>
 * XXX - TextAreaFigure should not draw a rectangle on its own but rather
 * rely on a decorator. We probably need a DecoratorConnector for this and we
 * need a way to specify the inner bounds of the decorator. We also need a way
 * to center the text of the TextAreaFigure verticaly and horizontaly.
 * @author    Eduardo Francos - InContext (original version),
 *            Werner Randelshofer (this derived version)
 * @version 2.0.1 2006-02-27 Draw UNDERLINE_LOW_ONE_PIXEL instead of UNDERLINE_ON. 
 * <br>2.0 2006-01-14 Changed to support double precison coordinates.
 * <br>1.0 5. M�rz 2004  Created.
 
 cache of the TextFigure's layout
 Creates a new instance. 
     * Gets the text shown by the text figure.
     
     * Sets the text shown by the text figure.
     
     * Returns the insets used to draw text.
     
Strings.split(getText(), '\n');
     * Draws a paragraph of text at the specified y location and returns
     * the y position for the next paragraph.
     
 assume styledText is an AttributedCharacterIterator, and the number
 of tabs in styledText is tabCount
 Now tabLocations has an entry for every tab's offset in
 the text.  For convenience, the last entry is tabLocations
 is the offset of the last character in the text.
 Lay out and draw each line.  All segments on a line
 must be computed before any drawing can occur, since
 we must know the largest ascent on the line.
 TextLayouts are computed and stored in a List;
 their horizontal positions are stored in a parallel
 List.
 lineContainsText is true after first segment is drawn
 layout can be null if lineContainsText is true
 move to next tab stop
 now iterate through layouts and draw them
     * Returns a specialized tool for the given coordinate.
     * <p>Returns null, if no specialized tool is available.
     
