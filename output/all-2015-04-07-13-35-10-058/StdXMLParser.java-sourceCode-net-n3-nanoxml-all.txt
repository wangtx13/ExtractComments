 StdXMLParser.java                                               NanoXML/Java
 * $Revision: 1.5 $
 * $Date: 2002/03/24 11:37:00 $
 * $Name: RELEASE_2_2_1 $
 * This file is part of NanoXML 2 for Java.
 * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from the
 * use of this software.
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *  1. The origin of this software must not be misrepresented; you must not
 *     claim that you wrote the original software. If you use this software in
 *     a product, an acknowledgment in the product documentation would be
 *     appreciated but is not required.
 *  2. Altered source versions must be plainly marked as such, and must not be
 *     misrepresented as being the original software.
 *  3. This notice may not be removed or altered from any source distribution.
 
 * StdXMLParser is the core parser of NanoXML.
 * @author Marc De Scheemaecker
 * @version $Name: RELEASE_2_2_1 $, $Revision: 1.5 $
 
    * The builder which creates the logical structure of the XML data.
    
    * The reader from which the parser retrieves its data.
    
    * The entity resolver.
    
    * The validator that will process entity references and validate the XML
    * data.
    
    * Creates a new parser.
    
    * Cleans up the object when it's destroyed.
    
    * Sets the builder which creates the logical structure of the XML data.
    *
    * @param builder the non-null builder
    
    * Returns the builder which creates the logical structure of the XML data.
    *
    * @return the builder
    
    * Sets the validator that validates the XML data.
    *
    * @param validator the non-null validator
    
    * Returns the validator that validates the XML data.
    *
    * @return the validator
    
    * Sets the entity resolver.
    *
    * @param resolver the non-null resolver
    
    * Returns the entity resolver.
    *
    * @return the non-null resolver
    
    * Sets the reader from which the parser retrieves its data.
    *
    * @param reader the reader
    
    * Returns the reader from which the parser retrieves its data.
    *
    * @return the reader
    
    * Parses the data and lets the builder create the logical data structure.
    *
    * @return the logical structure built by the builder
    *
    * @throws net.n3.nanoxml.XMLException
    *		if an error occurred reading or parsing the data
    
 throw new XMLException(e);
    * Scans the XML data for elements.
    *
    * @throws java.lang.Exception
    *     if something went wrong
    
 don't allow CDATA
 no default namespace
 skip whitespace
    * Scans an XML tag.
    *
    * @param allowCDATA true if CDATA sections are allowed at this point
    * @param defaultNamespace the default namespace URI (or null)
    * @param namespaces list of defined namespaces
    *
    * @throws java.lang.Exception
    *     if something went wrong
    
    * Processes a "processing instruction".
    *
    * @throws java.lang.Exception
    *     if something went wrong
    
    * Processes a tag that starts with a bang (&lt;!...&gt;).
    *
    * @param allowCDATA true if CDATA sections are allowed at this point
    *
    * @throws java.lang.Exception
    *     if something went wrong
    
    * Processes a CDATA section.
    *
    * @throws java.lang.Exception
    *     if something went wrong
    
    * Processes a document type declaration.
    *
    * @throws java.lang.Exception
    *		if an error occurred reading or parsing the data
    
 BEGIN PATCH W. Randelshofer Don't read DTD
 END PATCH W. Randelshofer Don't read DTD
    * Processes a regular element.
    *
    * @param defaultNamespace the default namespace URI (or null)
    * @param namespaces list of defined namespaces
    *
    * @throws java.lang.Exception
    *     if something went wrong
    
 <[^/]
CDATA allowed
 [^<]
    * Processes an attribute of an element.
    *
    * @param attrNames contains the names of the attributes.
    * @param attrValues contains the values of the attributes.
    * @param attrTypes contains the types of the attributes.
    *
    * @throws java.lang.Exception
    *     if something went wrong
    
