 * @(#)ResourceBundleUtil.java  1.7  2006-05-06
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
 * This is a convenience wrapper for accessing resources stored in a ResourceBundle.
 * @author  Werner Randelshofer, Staldenmattweg 2, CH-6405 Immensee, Switzerland
 * @version 1.7 2006-05-06 Suffixes changed. Redirection via LocaleUtil added.
 * <br>     1.6.1 2006-04-12 Method getBundle() added.
 * <br>     1.6 2006-03-15  Method setBaseClass/getBaseClass added.
 * <br>     1.5 2006-02-15   Methods getInteger, getLAFBundle, configureButton
 *                            and getTip() added.
 * <br>      1.4 2005-01-04   Methods configureAction and configureMenu added.
 * <br>      1.3 2001-10-10   The default resource name changed from 'name_Metal'
 *                            to 'name'.
 * <br>      1.2 2001-07-23   Adaptation to JDK 1.3 in progress.
 * <br>      1.0 2000-06-10   Created.
 
 The wrapped resource bundle. 
     * Creates a new ResouceBundleUtil which wraps
     * the provided resource bundle.
     
     * Get a String from the ResourceBundle.
     * <br>Convenience method to save casting.
     *
     * @param key The key of the property.
     * @return The value of the property. Returns the key
     *          if the property is missing.
     
     * Get an Integer from the ResourceBundle.
     * <br>Convenience method to save casting.
     *
     * @param key The key of the property.
     * @return The value of the property. Returns -1
     *          if the property is missing.
     
     * Get an image icon from the ResourceBundle.
     * <br>Convenience method .
     *
     * @param key The key of the property. This method appends ".icon" to the key.
     * @return The value of the property. Returns null
     *          if the property is missing.
     
            try {
                File f = new File(url.toURI());
                if (! f.exists()) {
            System.out.println(f+" does not exist!");
            }
            } catch (Throwable t) {
                t.printStackTrace();
            }
     * Get a Mnemonic from the ResourceBundle.
     * <br>Convenience method.
     *
     * @param key The key of the property.
     * @return The first char of the value of the property.
     *          Returns '\0' if the property is missing.
     
     * Get a Mnemonic from the ResourceBundle.
     * <br>Convenience method.
     *
     * @param key The key of the property. This method appends ".mnem" to the key.
     * @return The first char of the value of the property.
     *          Returns '\0' if the property is missing.
     
     * Get a Mnemonic from the ResourceBundle.
     * <br>Convenience method.
     *
     * @param key The key of the property. This method appends ".tip" to the key.
     * @return The ToolTip. Returns null if no tooltip is defined.
     
     * Get a KeyStroke from the ResourceBundle.
     * <BR>Convenience method.
     *
     * @param key The key of the property.
     * @return <code>javax.swing.KeyStroke.getKeyStroke(value)</code>.
     *          Returns null if the property is missing.
     
     * Get a KeyStroke from the ResourceBundle.
     * <BR>Convenience method.
     *
     * @param key The key of the property. This method adds ".acc" to the key.
     * @return <code>javax.swing.KeyStroke.getKeyStroke(value)</code>.
     *          Returns null if the property is missing.
     
     * Get the appropriate ResourceBundle subclass.
     * The baseName is extended by the Swing Look and Feel ID
     * and by the Locale code.
     *
     * The default Look and Feel ID is Metal.
     *
     * @see java.util.ResourceBundle
     
        ResourceBundleUtil r;
        try {
            r = new ResourceBundleUtil(
                    ResourceBundle.getBundle(baseName + "_" + UIManager.getLookAndFeel().getID()
                    )
                    );
        } catch (MissingResourceException e) {
            r = new ResourceBundleUtil(
                    ResourceBundle.getBundle(baseName)
                    );
        }
        return r;
button.setACCELERATOR_KEY, getAcc(argument));
action.putValue(Action.MNEMONIC_KEY, new Integer(getMnem(argument)));
button.setACCELERATOR_KEY, getAcc(argument));
action.putValue(Action.MNEMONIC_KEY, new Integer(getMnem(argument)));
     * Get the appropriate ResourceBundle subclass.
     * The ID of the current Look and Feel is prepended to the locale attributes.
     *
     * @see java.util.ResourceBundle
     
        Locale lafLocale = new Locale(locale.getLanguage(), locale.getCountry(), UIManager.getLookAndFeel().getID());
            r = new ResourceBundleUtil(
                    ResourceBundle.getBundle(baseName, lafLocale)
                    );
        
