 * @(#)ConnectionTool.java  3.1  2006-07-15
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
ï¿½
 
 * A tool that can be used to connect figures, to split
 * connections, and to join two segments of a connection.
 * ConnectionTools turns the visibility of the Connectors
 * on when it enters a figure.
 * The connection object to be created is specified by a prototype.
 * <p>
 * FIXME: Use a Tracker instance for each state of this tool.
 * @author Werner Randelshofer
 * @version 3.1 2006-07-15 Added support for prototype class name. 
 * <br>3.0 2006-06-07 Reworked.
 * <br>2.1 2006-03-15 When user is not pressing the mouse button, we use
 * the mouse over view as the current view.
 * <br>2.0.1 2006-02-14 Fixed drawing code.
 * <br>2.0 2006-01-14 Changed to support double precision coordinates.
 * <br>1.0 2003-12-01 Derived from JHotDraw 5.4b1.
 
     * the anchor point of the interaction
     
     * the currently created figure
     
     * the currently manipulated connection point
     
     * the currently edited connection
     
     * the figure that was actually added
     * Note, this can be a different figure from the one which has been created.
     
     * the prototypical figure that is used to create new
     * connections.
     
 Creates a new instance. 
     * Manipulates connections in a context dependent way. If the
     * mouse down hits a figure start a new connection. If the mousedown
     * hits a connection split a segment or join two segments.
     
     * Adjust the created connection or split segment.
     
new Rectangle2D.Double(viewToDrawing(anchor), p));
     * Connects the figures if the mouse is released over another
     * figure.
     
 getView().clearSelection();
--
     * Creates the ConnectionFigure. By default the figure prototype is
     * cloned.
     
     * Finds a connectable figure target.
     
     * Finds a connectable figure target.
     
&& ! target.includes(start)
     * Finds an existing connection figure.
     
     * Gets the connection which is created by this tool
     
 track the figure containing the mouse
view().checkDamage();
     * Finds a connection start figure.
     
     * Gets the figure that was actually added
     * Note, this can be a different figure from the one which has been created.
     
