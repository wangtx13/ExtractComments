 * @(#)GraphicalCompositeFigure.java  2.0  2006-01-14
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
ï¿½
 
 * The GraphicalCompositeFigure fills in the gap between a AbstractCompositeFigure
 * and other figures which mainly have a presentation purpose. The
 * GraphicalCompositeFigure can be configured with any Figure which
 * takes over the task for rendering the graphical presentation for
 * a AbstractCompositeFigure. Therefore, the GraphicalCompositeFigure manages
 * contained figures like the AbstractCompositeFigure does, but delegates
 * its graphical presentation to another (graphical) figure which
 * purpose it is to draw the container for all contained figures.
 * The GraphicalCompositeFigure adds to the {@link AbstractCompositeFigure AbstractCompositeFigure}
 * by containing a presentation figure by default which can not be removed.  Normally,
 * the {@link AbstractCompositeFigure AbstractCompositeFigure} can not be seen without containing a figure
 * because it has no mechanism to draw itself.  It instead relies on its contained
 * figures to draw themselves thereby giving the {@link AbstractCompositeFigure AbstractCompositeFigure} its
 * appearance.  However, the <b>GraphicalCompositeFigure</b>'s presentation figure
 * can draw itself even when the <b>GraphicalCompositeFigure</b> contains no other figures.
 * The <b>GraphicalCompositeFigure</b> also uses a {@link Layouter Layouter} or layout
 * its contained figures.
 * @author Wolfram Kaiser (original code), Werner Randelshofer (this derived version)
 * @version 2.0 2006-01-14 Changed to support double precision coordinates.
 * <br>1.0 1. Dezember 2003  Derived from JHotDraw 5.4b1.
 
     * Figure which performs all presentation tasks for this
     * AbstractCompositeFigure as CompositeFigures usually don't have
     * an own presentation but present only the sum of all its
     * children.
     
     * Handles figure changes in the children.
     
     * Default constructor which uses nothing as presentation
     * figure. This constructor is needed by the Storable mechanism.
     
     * Constructor which creates a GraphicalCompositeFigure with
     * a given graphical figure for presenting it.
     *
     * @param	newPresentationFigure	figure which renders the container
     
     * Return the logcal display area. This method is delegated to the encapsulated
     * presentation figure.
     
     * Return the draw area. This method is delegated to the
     * encapsulated presentation figure.
     
     * Moves the figure. This is the
     * method that subclassers override. Clients usually
     * call displayBox.
     
     * Standard presentation method which is delegated to the encapsulated presentation figure.
     * The presentation figure is moved as well as all contained figures.
     
     * Draw the figure. This method is delegated to the encapsulated presentation figure.
     
     * Return default handles from the presentation figure.
     
return getPresentationFigure().getHandles();
     * Set a figure which renders this AbstractCompositeFigure. The presentation
     * tasks for the AbstractCompositeFigure are delegated to this presentation
     * figure.
     *
     *
     * @param newPresentationFigure	figure takes over the presentation tasks
     
 FIXME: We should calculate the layout here.
     * Get a figure which renders this AbstractCompositeFigure. The presentation
     * tasks for the AbstractCompositeFigure are delegated to this presentation
     * figure.
     *
     *
     * @return figure takes over the presentation tasks
     
     * Sets an attribute of the figure.
     * AttributeKey name and semantics are defined by the class implementing
     * the figure interface.
     
     * Sets an attribute of the figure.
     * AttributeKey name and semantics are defined by the class implementing
     * the figure interface.
     
     * Gets an attribute from the figure.
     
     * Applies all attributes of this figure to that figure.
     
     * This is a default implementation that chops the point at the rectangle
     * returned by getBounds() of the figure.
     * <p>
     * Figures which have a non-rectangular shape need to override this method.
     * <p>
     * This method takes the following attributes into account:
     * AttributeKeys.STROKE_COLOR, AttributeKeys.STROKE_PLACEMENT, and 
     * AttributeKeys.StrokeTotalWidth.
     
