 * @(#)BezierFigure.java 2.1.1  2006-06-08
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
 * A BezierFigure can be used to draw arbitrary shapes using a BezierPath.
 * It can be used to draw an open path or a closed shape.
 * @version 2.1.1 2006-06-08 Fixed caps drawing.
 * <br>2.1 2006-04-21 Improved caps drawing.
 * <br>2.0 2006-01-14 Changed to support double precison coordinates.
 * <br>1.0 March 14, 2004.
 * @author Werner Randelshofer
 
     * The BezierPath.
     
     * The cappedPath BezierPath is derived from variable path.
     * We cache it to increase the drawing speed of the figure.
     
 Creates a new instance. 
 Creates a new instance. 
path.setClosed(isClosed);
 DRAWING
 SHAPE AND BOUNDS
 ATTRIBUTES
 EDITING
 CONNECTING
     * Returns the Figures connector for the specified location.
     * By default a ChopDiamondConnector is returned.
     * @see ChopDiamondConnector
     
 COMPOSITE FIGURES
 CLONING
 EVENT HANDLING
 FIXME - Check here, if caps path contains the point
 FIXME - Check here, if caps path contains the point
     * Checks if this figure can be connected. By default
     * filled BezierFigures can be connected.
     
 Make sure, bounds are not empty
     * Returns a clone of the bezier path of this figure.
     
     * Sets the bezier path, without cloning and without firing events.
     
     * Returns a path which is cappedPath at the ends, to prevent
     * it from drawing under the end caps.
     
     * Adds a control point.
     
     * Adds a node to the list of points.
     
     * Adds a control point.
     
     * Adds a control point.
     
     * Sets a control point.
     
     * Sets a control point.
     
     * Gets a control point.
     
     * Convenience method for getting the point coordinate of
     * the first control point of the specified node.
     
     * Gets the point coordinate of a control point.
     
     * Sets the point coordinate of a control point.
     
 XXX - Fire undoable Edit event
     * Sets the point coordinate of control point 0 at the specified node.
     
     * Sets the point coordinate of a control point.
     
     * Convenience method for setting the point coordinate of the start point.
     
     * Convenience method for setting the point coordinate of the end point.
     
     * Convenience method for getting the start point.
     
     * Convenience method for getting the end point.
     
     * Finds a control point index.
     * Returns -1 if no control point could be found.
     * FIXME - Move this to BezierPath
     
     * Removes all points.
     
     * Removes the Point2D.Double at the specified index.
     
     * Gets the segment of the polyline that is hit by
     * the given Point2D.Double.
     * @return the index of the segment or -1 if no segment was hit.
     *
     * XXX - Move this to BezierPath
     
 Fixme - use path iterator
     * Joins two segments into one if the given Point2D.Double hits a node
     * of the polyline.
     * @return true if the two segments were joined.
     *
     * XXX - Move this to BezierPath
     
     * Splits the segment at the given Point2D.Double if a segment was hit.
     * @return the index of the segment or -1 if no segment was hit.
     *
     * XXX - Move this to BezierPath
     
     * Removes the Point2D.Double at the specified index.
     
     * Removes the Point2D.Double at the specified index.
     
     * Gets the node count.
     
     * Gets the point count.
     
     * Joins two segments into one if the given Point2D.Double hits a node
     * of the polyline.
     * @return true if the two segments were joined.
     
     * Splits the segment at the given Point2D.Double if a segment was hit.
     * @return the index of the segment or -1 if no segment was hit.
     
     * Handles a mouse click.
     
