 * @(#)ImageBevelBorder.java  3.0 2003-08-31
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
package org.jhotdraw.quaqua;
 * Draws a filled bevel border using an image and insets.
 * The image must consist of a bevel and a fill area.
 * <p>
 * The insets and the size of the image are
 * used do determine which parts of the image shall be
 * used to draw the corners and edges of the bevel as
 * well the fill area.
 * <p>For example, if you provide an image of size 10,10
 * and a insets of size 2, 2, 4, 4, then the corners of
 * the border are made up of top left: 2,2, top right: 2,4,
 * bottom left: 2,4, bottom right: 4,4 rectangle of the image.
 * The inner area of the image is used to fill the inner area.
 * @author  Werner Randelshofer
 * @version 3.0.x 2003-09-05 Copied into org.jhotdraw.quaqua for the Quaqua
 * look and feel.
 * <br>3.0 2003-08-31 Moved from package org.jhotdraw.gui.plaf to
 * org.jhotdraw.gui.border. Renamed from BevelBorder to ImageBevelBorder
 * to avoid name conflicts with class javax.swing.border.BevelBorder. Constructor
 * option 'fillContentArea' added.
 * <br>2.0 2003-07-19 Redesigned.
 * <br>1.1.1 2003-07-12 Class cast exception when filling a rectangle using
 * a texture.
 * <br>1.1 2002-05-29 Refactored.
 * <br>1.0 2001-10-16
 
     * The image to be used for drawing.
     
     * The border insets
     
     * The insets of the image.
     
     * This attribute is set to true, when the image
     * is used to fill the content area too.
     
     * Creates a new instance with the given image and insets.
     * The image has the same insets as the border.
     
     * Creates a new instance with the given image and insets.
     * The image has different insets than the border.
     
     * Creates a new instance with the given image and insets.
     * The image has different insets than the border.
     
     * Returns true if the border is opaque.
     * This implementation always returns false.
     
     * Returns the insets of the border.
     * @param c the component for which this border insets value applies
     
     * Paints the bevel image for the specified component with the
     * specified position and size.
     * @param c the component for which this border is being painted
     * @param gr the paint graphics
     * @param x the x position of the painted border
     * @param y the y position of the painted border
     * @param width the width of the painted border
     * @param height the height of the painted border
     
 Cast Graphics to Graphics2D
 Set some variables for easy access of insets and image size
 Optimisation: Draw image directly if it fits into the component
 Optimisation: Remove insets, if image width or image height fits
 Adjust insets if component is too small
Math.max(0, left + (width - left - right) / 2);
Math.max(0, top + (height - top - bottom) / 2);
 Draw the Leads
g.fillRect(x+width-right, y, x+width, y+top);
 Draw the edges
 North
 South
 West
 East
 Fill the center
