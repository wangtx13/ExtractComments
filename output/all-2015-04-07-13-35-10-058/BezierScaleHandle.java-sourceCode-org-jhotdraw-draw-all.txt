 * @(#)BezierScaleHandle.java  1.0  16. Juni 2006
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
 * A Handle to scale and rotate a BezierFigure.
 * Pressing the alt key or the shift key while manipulating the handle restricts
 * the handle to only rotate the BezierFigure.
 * @author Werner Randelshofer.
 * @version 1.0 16. Juni 2006 Created.
 
 Creates a new instance. 
     * Draws this handle.
     
location =
 find a nice place to put handle
 Need to pick a place that will not overlap with point handle
 and is internal to polygon
 Try for one handlesize step away from outermost toward center
 best we can do?
 best we can do?
     *	public  void scaleRotate(Point anchor, Polygon originalPolygon, Point p) {
                willChange();
     
                // use center to determine relative angles and lengths
                Point ctr = center(originalPolygon);
                double anchorLen = Geom.length(ctr.x, ctr.y, anchor.x, anchor.y);
     
                if (anchorLen > 0.0) {
                        double newLen = Geom.length(ctr.x, ctr.y, p.x, p.y);
                        double ratio = newLen / anchorLen;
     
                        double anchorAngle = Math.atan2(anchor.y - ctr.y, anchor.x - ctr.x);
                        double newAngle = Math.atan2(p.y - ctr.y, p.x - ctr.x);
                        double rotation = newAngle - anchorAngle;
     
                        int n = originalPolygon.npoints;
                        int[] xs = new int[n];
                        int[] ys = new int[n];
     
                        for (int i = 0; i < n; ++i) {
                                int x = originalPolygon.xpoints[i];
                                int y = originalPolygon.ypoints[i];
                                double l = Geom.length(ctr.x, ctr.y, x, y) * ratio;
                                double a = Math.atan2(y - ctr.y, x - ctr.x) + rotation;
                                xs[i] = (int)(ctr.x + l * Math.cos(a) + 0.5);
                                ys[i] = (int)(ctr.y + l * Math.sin(a) + 0.5);
                        }
                        setInternalPolygon(new Polygon(xs, ys, n));
                }
                changed();
        }
     
