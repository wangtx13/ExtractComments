 * @(#)PolyLineDecorationLocator.java  1.0  3. Februar 2004
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
 * This locator locates a position relative to a polyline.
 * The position is chosen in a way, which is suitable for labeling the polyline.
 * The preferredSize of the label is used to determine its location.
 * @author  Werner Randelshofer
 * @version 2.0 2006-01-14 Changed to support double precison coordinates.
 * <br>1.0 3. Februar 2004  Created.
 
     * Creates a new instance.
     * This constructor is for use by DOMStorable only.
     
 Creates a new locator.
     *
     * @param relativePosition The relative position of the label on the polyline.
     * 0.0 specifies the start of the polyline, 1.0 the
     * end of the polyline. Values between 0.0 and 1.0 are relative positions
     * on the polyline.
     * @param angle The angle of the distance vector.
     * @param distance The length of the distance vector.
     
     * Returns a Point2D.Double on the polyline that is at the provided relative position.
     
     * Returns a Point2D.Double on the polyline that is at the provided relative position.
     * XXX - Implement this and move it to BezierPath
     
 Get a point on the path an the next point on the path
 South East
 North East
 South East
 North East
 South West
 North West
        int percentage = (int) (relativePosition * 100);
 
        int segment; // relative segment
        Point2D.Double segPoint; // relative Point2D.Double on the segment
        int nPoints = owner.getPointCount();
        Point2D.Double[] Points = owner.getPoints();
 
        if (nPoints < 2) return new Point2D.Double(0, 0);
 
        switch (percentage) {
            case 0 :
                segment = 0;
                segPoint = owner.getStartPoint();
                break;
            case 100 :
                segment = owner.getPointCount() - 2;
                segPoint = owner.getEndPoint();
                break;
            default :
                double totalLength = 0d;
                double[] segLength = new double[nPoints - 1];
                for (int i=1; i < nPoints; i++) {
                    segLength[i-1] = Geom.length(Points[i-1].x, Points[i-1].y, Points[i].x, Points[i].y);
                    totalLength += segLength[i-1];
                }
                double relativeProgress = percentage * totalLength / 101d;
                segment = 0;
                double segMin = 0d;
                for (segment=0; segment < segLength.length - 1; segment++) {
                    if (segMin + segLength[segment] > relativeProgress) break;
                    segMin += segLength[segment];
                }
 
                // Compute the relative Point2D.Double on the line
                segPoint = new Point2D.Double();
                relativeProgress -= segMin;
                segPoint.x = (int) ((Points[segment].x * (segLength[segment] - relativeProgress) + Points[segment + 1].x * relativeProgress) / segLength[segment] +.5);
                segPoint.y = (int) ((Points[segment].y * (segLength[segment] - relativeProgress) + Points[segment + 1].y * relativeProgress) / segLength[segment] +.5);
 
                break;
        }
 
        Dimension2DDouble labelDim = label.getPreferredSize();
 
        Line2D.Double line = new Line2D.Double(Points[segment].x, Points[segment].y, Points[segment + 1].x, Points[segment + 1].y);
        double dir = Math.atan2(Points[segment + 1].y - Points[segment].y, Points[segment + 1].x - Points[segment].x);
        double alpha = dir + angle;
 
        Point2D.Double p = new Point2D.Double(
        (int) (segPoint.x + distance * Math.cos(alpha)),
        (int) (segPoint.y + distance * Math.sin(alpha))
        );
 
        if (p.x >= segPoint.x) {
            if (p.y >= segPoint.y) {
                // South East
                return new Point2D.Double(p.x, p.y);
            } else {
                // North East
                return new Point2D.Double(p.x, p.y - labelDim.height);
            }
        } else {
            if (p.y >= segPoint.y) {
                // South West
                return new Point2D.Double(p.x - labelDim.width,  p.y);
            } else {
                // North West
                return new Point2D.Double(p.x - labelDim.width, p.y - labelDim.height);
            }
        }
