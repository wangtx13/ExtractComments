 * @(#)GenericListener.java  1.1  2003-11-03
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
 * The GenericListener creates anonymous listener classes at runtime.
 * <p>
 * Usage:
 * <pre>
 * public class Demo {
 *   JPanel root = new JPanel(new BorderLayout());
 *   JLabel label = new JLabel(" ");
 *   public void myButtonAction(ActionEvent e) {
 *     label.setText("buttonAction");
 *   }
 *   public void myMouseEntered(MouseEvent e) {
 *     label.setText("mouseEntered: "+e.toString());
 *   }
 *   Demo() {
 *     JButton button = new JButton("Button with Dynamic Listener");
 *     //This listener will be generated at run-time, i.e. at run-time
 *     // an ActionListener class will be code-generated and then
 *     // class-loaded.  Only one of these is actually created, even
 *     // if many calls to GenericListener.create(ActionListener.class ...)
 *     // are made.
 *     ActionListener actionListener = (ActionListener)(GenericListener.create(
 *       ActionListener.class,
 *       "actionPerformed",
 *       this,
 *       "myButtonAction")
 *     );
 *     button.addActionListener(actionListener);
 *     // Here's another dynamically generated listener.  This one is
 *     // a little different because the listenerMethod argument actually
 *     // specifies one of many listener methods.  In the previous example
 *     // "actionPerformed" named the one and only ActionListener method.
 *     MouseListener mouseListener = (MouseListener)(GenericListener.create(
 *       MouseListener.class,
 *       "mouseEntered",
 *       this,
 *       "myMouseEntered")
 *     );
 *     button.addMouseListener(mouseListener);
 * </pre>
 * @author Werner Randelshofer
 * @version 1.1 2003-11-03 Support for parameterless target methods added.
 * <br>1.0 2003-11-02 Created.
 
     * A convenient version of <code>create(listenerMethod, targetObject, targetMethod)</code>.
     * This version looks up the listener and target Methods, so you don't have to.
     
 Search a target method with the same parameter types as the listener method.
 Nothing found? Search a target method with no parameters
 Still nothing found? We give up.
     * Return an instance of a class that implements the interface that contains
     * the declaration for <code>listenerMethod</code>.  In this new class,
     * <code>listenerMethod</code> will apply <code>target.targetMethod</code>
     * to the incoming Event.
     
         * The implementation of the create method uses the Dynamic Proxy API
         * introduced in JDK 1.3.
         *
         * Create an instance of the DefaultInvoker and override the invoke
         * method to handle the invoking the targetMethod on the target.
         
 Send all methods except for the targetMethod to
 the superclass for handling.
 Special treatment for parameterless target methods:
 Regular treatment for target methods having the same
 argument list as the listener method.
     * Implementation of the InvocationHandler which handles the basic
     * object methods.
     
 Although listener methods are supposed to be void, we
 allow for any return type here and produce null/0/false
 as appropriate.
 this will convert to any other kind of number
 Helper methods for "EZ" version of create(): 
 given the arguments to create(), find out which listener is desired:
            if (result == null) {
                throw new RuntimeException("no such method "+targetMethodName+" in "+target.getClass());
            }
 yes!
 search for a public version which m overrides
 no public version of m here
