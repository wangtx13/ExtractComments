 StdXMLReader.java                                               NanoXML/Java
 * $Revision: 1.4 $
 * $Date: 2002/01/04 21:03:28 $
 * $Name: RELEASE_2_2_1 $
 * This file is part of NanoXML 2 for Java.
 * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from the
 * use of this software.
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *  1. The origin of this software must not be misrepresented; you must not
 *     claim that you wrote the original software. If you use this software in
 *     a product, an acknowledgment in the product documentation would be
 *     appreciated but is not required.
 *  2. Altered source versions must be plainly marked as such, and must not be
 *     misrepresented as being the original software.
 *  3. This notice may not be removed or altered from any source distribution.
 
 * StdXMLReader reads the data to be parsed.
 * @author Marc De Scheemaecker
 * @version $Name: RELEASE_2_2_1 $, $Revision: 1.4 $
 
    * A stacked reader.
    *
    * @author Marc De Scheemaecker
    * @version $Name: RELEASE_2_2_1 $, $Revision: 1.4 $
    
    * The stack of readers.
    
    * The current push-back reader.
    
    * Creates a new reader using a string as input.
    *
    * @param str the string containing the XML data
    
    * Creates a new reader using a file as input.
    *
    * @param filename the name of the file containing the XML data
    *
    * @throws java.io.FileNotFoundException
    *     if the file could not be found
    * @throws java.io.IOException
    *     if an I/O error occurred
    
    * Initializes the reader from a system and public ID.
    *
    * @param publicID the public ID which may be null.
    * @param systemID the non-null system ID.
    *
    * @throws MalformedURLException
    *     if the system ID does not contain a valid URL
    * @throws FileNotFoundException
    *     if the system ID refers to a local file which does not exist
    * @throws IOException
    *     if an error occurred opening the stream
    
    * Initializes the XML reader.
    *
    * @param reader the input for the XML data.
    
 never happens
    * Cleans up the object when it's destroyed.
    
    * Scans the encoding from an &lt;?xml...?&gt; tag.
    *
    * @param str the first tag in the XML data.
    *
    * @return the encoding, or null if no encoding has been specified.
    
    * Converts a stream to a reader while detecting the encoding.
    *
    * @param stream    the input for the XML data.
    * @param charsRead buffer where to put characters that have been read
    *
    * @throws java.io.IOException
    *     if an I/O error occurred
    
    * Initializes the XML reader.
    *
    * @param stream the input for the XML data.
    *
    * @throws java.io.IOException
    *		if an I/O error occurred
    
 never happens
    * Reads a character.
    *
    * @return the character
    *
    * @throws java.io.IOException
    *		if no character could be read
    
    * Returns true if the current stream has no more characters left to be
    * read.
    *
    * @throws java.io.IOException
    *		if an I/O error occurred
    
    * Returns true if there are no more characters left to be read.
    *
    * @throws java.io.IOException
    *		if an I/O error occurred
    
    * Pushes the last character read back to the stream.
    *
    * @param ch the character to push back.
    *
    * @throws java.io.IOException
    *     if an I/O error occurred
    
    * Opens a stream from a public and system ID.
    *
    * @param publicID the public ID, which may be null
    * @param systemID the system ID, which is never null
    *
    * @throws java.net.MalformedURLException
    *     if the system ID does not contain a valid URL
    * @throws java.io.FileNotFoundException
    *     if the system ID refers to a local file which does not exist
    * @throws java.io.IOException
    *     if an error occurred opening the stream
    
    * Starts a new stream from a Java reader. The new stream is used
    * temporary to read data from. If that stream is exhausted, control
    * returns to the parent stream.
    *
    * @param reader the non-null reader to read the new data from
    
    * Starts a new stream from a Java reader. The new stream is used
    * temporary to read data from. If that stream is exhausted, control
    * returns to the parent stream.
    *
    * @param reader the non-null reader to read the new data from
    * @param isInternalEntity true if the reader is produced by resolving
    *                         an internal entity
    
    * Returns the current "level" of the stream on the stack of streams.
    
    * Returns the line number of the data in the current stream.
    
    * Sets the system ID of the current stream.
    *
    * @param systemID the system ID
    *
    * @throws java.net.MalformedURLException
    *     if the system ID does not contain a valid URL
    
    * Sets the public ID of the current stream.
    *
    * @param publicID the public ID
    
    * Returns the current system ID.
    
      * Returns the current public ID.
    
