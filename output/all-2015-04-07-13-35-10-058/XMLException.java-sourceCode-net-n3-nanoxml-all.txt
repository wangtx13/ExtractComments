 XMLException.java                                               NanoXML/Java
 * $Revision: 1.4 $
 * $Date: 2002/01/04 21:03:29 $
 * $Name: RELEASE_2_2_1 $
 * This file is part of NanoXML 2 for Java.
 * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from the
 * use of this software.
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *  1. The origin of this software must not be misrepresented; you must not
 *     claim that you wrote the original software. If you use this software in
 *     a product, an acknowledgment in the product documentation would be
 *     appreciated but is not required.
 *  2. Altered source versions must be plainly marked as such, and must not be
 *     misrepresented as being the original software.
 *  3. This notice may not be removed or altered from any source distribution.
 
 * An XMLException is thrown when an exception occurred while processing the
 * XML data.
 * @author Marc De Scheemaecker
 * @version $Name: RELEASE_2_2_1 $, $Revision: 1.4 $
 
    * The message of the exception.
    
    * The system ID of the XML data where the exception occurred.
    
    * The line number in the XML data where the exception occurred.
    
    * Encapsulated exception.
    
    * Creates a new exception.
    *
    * @param msg the message of the exception.
    
    * Creates a new exception.
    *
    * @param e the encapsulated exception.
    
    * Creates a new exception.
    *
    * @param systemID the system ID of the XML data where the exception
    *                 occurred
    * @param lineNr   the line number in the XML data where the exception
    *                 occurred.
    * @param e        the encapsulated exception.
    
    * Creates a new exception.
    *
    * @param systemID the system ID of the XML data where the exception
    *                 occurred
    * @param lineNr   the line number in the XML data where the exception
    *                 occurred.
    * @param msg      the message of the exception.
    
    * Creates a new exception.
    *
    * @param systemID     the system ID from where the data came
    * @param lineNr       the line number in the XML data where the exception
    *                     occurred.
    * @param e            the encapsulated exception.
    * @param msg          the message of the exception.
    * @param reportParams true if the systemID, lineNr and e params need to be
    *                     appended to the message
    
    * Builds the exception message
    *
    * @param systemID     the system ID from where the data came
    * @param lineNr       the line number in the XML data where the exception
    *                     occurred.
    * @param e            the encapsulated exception.
    * @param msg          the message of the exception.
    * @param reportParams true if the systemID, lineNr and e params need to be
    *                     appended to the message
    
    * Cleans up the object when it's destroyed.
    
    * Returns the system ID of the XML data where the exception occurred.
    * If there is no system ID known, null is returned.
    
    * Returns the line number in the XML data where the exception occurred.
    * If there is no line number known, -1 is returned.
    
    * Returns the encapsulated exception, or null if no exception is
    * encapsulated.
    
    * Dumps the exception stack to a print writer.
    *
    * @param writer the print writer
    
    * Dumps the exception stack to an output stream.
    *
    * @param stream the output stream
    
    * Dumps the exception stack to System.err.
    
    * Returns a string representation of the exception.
    
