 * @(#)Bezier.java 2.0.1  2006-06-14
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 
 * Provides algorithms for fitting Bezier curves to a set of digitized points.
 * <p>
 * Source:<br>
 * An Algorithm for Automatically Fitting Digitized Curves
 * by Philip J. Schneider.<br>
 * from "Graphics Gems", Academic Press, 1990
 * @version 2.0.1 2006-06-14 Fit bezier curve must preserve closed state of
 * fitted BezierPath object.
 * <br>2.0 2006-01-14 Changed to support double precision coordinates.
 * <br>1.0 March 14, 2004.
 * @author Werner Randelshofer
 
     * The most points you can have.
     
 Prevent instance creation. 
     * Example of how to use the curve-fitting code.  Given an array
     * of points and a tolerance (squared error between points and
     * fitted curve), the algorithm will generate a piecewise
     * cubic Bezier representation that approximates the points.
     * When a cubic is generated, the routine "DrawBezierCurve"
     * is called, which outputs the Bezier curve just created
     * (arguments are the degree and the control points, respectively).
     * Users will have to implement this function themselves
     *  ascii output, etc.
     *
     
  Digitized points 
  Squared error 
  Fit the Bezier curves 
     * Fit a Bezier curve to a set of digitized points.
     *
     * @param p  Polygon with a set of digitized points.
     * @param error User-defined error squared.
     * @return Returns a GeneralPath containing the bezier curves.
     
     * Fit a Bezier curve to a set of digitized points.
     *
     * @param d  Array of digitized points.
     * @param error User-defined error squared.
     * @return Returns a GeneralPath containing the bezier curves.
     
  Unit tangent vectors at endpoints 
     * Fit a Bezier curve to a set of digitized points.
     *
     * @param path  The path onto which to fit a bezier curve.
     * @param error User-defined error squared.
     * @return Returns a BezierPath containing the bezier curves.
     
  Unit tangent vectors at endpoints 
     * Fit a Bezier curve to a (sub)set of digitized points.
     *
     * @param d  Array of digitized points.
     * @param first Indice of first point in d.
     * @param last Indice of last point in d.
     * @param tHat1 Unit tangent vectors at start point.
     * @param tHat2 Unit tanget vector at end point.
     * @param error User-defined error squared.
     * @param bezierPath Path to which the bezier curve segments are added.
     
Control points of fitted Bezier curve
  Parameter values for point  
  Improved parameter values 
  Maximum fitting error	 
  Point to split point set at.
         This is an array of size one, because we need it as an input/output parameter.
         
  Number of points in subset  
Error below which you try iterating  
  Max times to try iterating  
 Unit tangent vector at splitPoint 
  Use heuristic if region only has two points in it 
  Parameterize points, and attempt to fit curve 
  Find max deviation of points to fitted curve 
  If error not too large, try some reparameterization  
  and iteration 
 Fitting failed -- split at max error point and fit recursively 
     * Fit a Bezier curve to a (sub)set of digitized points.
     *
     * @param d  Array of digitized points.
     * @param first Indice of first point in d.
     * @param last Indice of last point in d.
     * @param tHat1 Unit tangent vectors at start point.
     * @param tHat2 Unit tanget vector at end point.
     * @param error User-defined error squared.
     * @param bezierPath Path to which the bezier curve segments are added.
     
Control points of fitted Bezier curve
  Parameter values for point  
  Improved parameter values 
  Maximum fitting error	 
  Point to split point set at.
         This is an array of size one, because we need it as an input/output parameter.
         
  Number of points in subset  
Error below which you try iterating  
  Max times to try iterating  
 Unit tangent vector at splitPoint 
  Use heuristic if region only has two points in it 
  Parameterize points, and attempt to fit curve 
  Find max deviation of points to fitted curve 
  If error not too large, try some reparameterization  
  and iteration 
 Fitting failed -- split at max error point and fit recursively 
     * Use least-squares method to find Bezier control points for region.
     *
     * @param d  Array of digitized points.
     * @param first Indice of first point in d.
     * @param last Indice of last point in d.
     * @param uPrime Parameter values for region .
     * @param tHat1 Unit tangent vectors at start point.
     * @param tHat2 Unit tanget vector at end point.
     
 Precomputed rhs for eqn	
 Number of pts in sub-curve 
 Matrix C		
 Matrix X			
 Determinants of matrices	
 Alpha values, left and right	
 Utility variable		
 RETURN bezier curve ctl pts	
 Compute the A's	
 Create the C and X matrices	
					C[1][0] += V2Dot(&A[i][0], &A[i][1]);
 Compute the determinants of C and X	
 Finally, derive alpha values	
  If alpha negative, use the Wu/Barsky heuristic (see text) 
 (if alpha is 0, you get coincident control points that lead to
         * divide by zero in any subsequent NewtonRaphsonRootFind() call. 
  First and last control points of the Bezier curve are 
  positioned exactly at the first and last data points 
  Control points 1 and 2 are positioned an alpha distance out 
  on the tangent vectors, left and right, respectively 
     * Given set of points and their parameterization, try to find
     * a better parameterization.
     *
     * @param d  Array of digitized points.
     * @param first Indice of first point of region in d.
     * @param last Indice of last point of region in d.
     * @param u Current parameter values.
     * @param bezCurve Current fitted curve.
     
  New parameter values	
     * Use Newton-Raphson iteration to find better root.
     *
     * @param Q  Current fitted bezier curve.
     * @param P  Digitized point.
     * @param u  Parameter value vor P.
     
  Q' and Q''			
u evaluated at Q, Q', & Q''	
  Improved u	
 Compute Q(u)	
 Generate control vertices for Q'	
 Generate control vertices for Q'' 
 Compute Q'(u) and Q''(u)	
 Compute f(u)/f'(u) 
 u = u - f(u)/f'(u) 
     * Evaluate a Bezier curve at a particular parameter value.
     *
     * @param degree  The degree of the bezier curve.
     * @param V  Array of control points.
     * @param t  Parametric value to find point for.
     
 Point on curve at parameter t	
 Local copy of control points		
 Copy array	
 Triangle computation	
     *  B0, B1, B2, B3 :
     *	Bezier multipliers
     
     * Approximate unit tangents at "left" endpoint of digitized curve.
     *
     * @param d Digitized points.
     * @param end Index to "left" end of region.
     
     * Approximate unit tangents at "right" endpoint of digitized curve.
     *
     * @param d Digitized points.
     * @param end Index to "right" end of region.
     
     * Approximate unit tangents at "center" of digitized curve.
     *
     * @param d Digitized points.
     * @param center Index to "center" end of region.
     
     * Assign parameter values to digitized points
     * using relative distances between points.
     *
     * @param d Digitized points.
     * @param first Indice of first point of region in d.
     * @param last Indice of last point of region in d.
     
  Parameterization		
     * Find the maximum squared distance of digitized points
     * to fitted curve.
     *
     * @param d Digitized points.
     * @param first Indice of first point of region in d.
     * @param last Indice of last point of region in d.
     * @param bezCurve Fitted Bezier curve
     * @param u Parameterization of points*
     * @param splitPoint Point of maximum error (input/output parameter, must be
     * an array of 1)
     
  Maximum error 
  Current error 
  Point on curve 
  Vector from point to curve 
 -------------------------------------------------------------------------
     * GraphicsGems.c
     * 2d and 3d Vector C Library
     * by Andrew Glassner
     * from "Graphics Gems", Academic Press, 1990
     * -------------------------------------------------------------------------
     
     * Return the distance between two points
     
     * Scales the input vector to the new length and returns it.
     
     * Returns length of input vector.
     
     * Returns squared length of input vector.
     
     * Return vector sum c = a+b.
     
     * Negates the input vector and returns it.
     
     * Return the dot product of vectors a and b.
     
     * Normalizes the input vector and returns it.
     
