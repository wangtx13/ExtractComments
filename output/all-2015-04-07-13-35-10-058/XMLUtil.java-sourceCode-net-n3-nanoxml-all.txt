 XMLUtil.java                                                    NanoXML/Java
 * $Revision: 1.5 $
 * $Date: 2002/02/03 21:19:38 $
 * $Name: RELEASE_2_2_1 $
 * This file is part of NanoXML 2 for Java.
 * Copyright (C) 2000-2002 Marc De Scheemaecker, All Rights Reserved.
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the authors be held liable for any damages arising from the
 * use of this software.
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *  1. The origin of this software must not be misrepresented; you must not
 *     claim that you wrote the original software. If you use this software in
 *     a product, an acknowledgment in the product documentation would be
 *     appreciated but is not required.
 *  2. Altered source versions must be plainly marked as such, and must not be
 *     misrepresented as being the original software.
 *  3. This notice may not be removed or altered from any source distribution.
 
 * Utility methods for NanoXML.
 * @author Marc De Scheemaecker
 * @version $Name: RELEASE_2_2_1 $, $Revision: 1.5 $
 
    * Skips the remainder of a comment.
    * It is assumed that &lt;!- is already read.
    *
    * @param reader the reader
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Skips the remainder of the current XML tag.
    *
    * @param reader         the reader
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Scans a public ID.
    *
    * @param publicID       will contain the public ID
    * @param reader         the reader
    *
    * @return the system ID
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Scans a system ID.
    *
    * @param reader         the reader
    *
    * @return the system ID
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Retrieves an identifier from the data.
    *
    * @param reader         the reader
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Retrieves a delimited string from the data.
    *
    * @param reader              the reader
    * @param entityChar          the escape character (&amp; or %)
    * @param entityResolver      the entity resolver
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Processes an entity.
    *
    * @param entity         the entity
    * @param reader         the reader
    * @param entityResolver the entity resolver
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Processes a character literal.
    *
    * @param entity         the entity
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Skips whitespace from the reader.
    *
    * @param reader         the reader
    * @param buffer         where to put the whitespace; null if the
    *                       whitespace does not have to be stored.
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Reads a character from the reader.
    *
    * @param reader         the reader
    * @param entityChar     the escape character (&amp; or %) used to indicate
    *                       an entity
    *
    * @return the character, or an entity expression (like e.g. &amp;lt;)
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Reads a character from the reader disallowing entities.
    *
    * @param reader         the reader
    * @param entityChar     the escape character (&amp; or %) used to indicate
    *                       an entity
    
    * Returns true if the data starts with <I>literal</I>.
    * Enough chars are read to determine this result.
    *
    * @param reader         the reader
    * @param literal        the literal to check
    *
    * @throws java.io.IOException
    *		if an error occurred reading the data
    
    * Throws an XMLParseException to indicate that an expected string is not
    * encountered.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param expectedString the string that is expected
    
    * Throws an XMLParseException to indicate that an entity could not be
    * resolved.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param entity    the name of the entity
    
    * Throws an XMLParseException to indicate that an entity reference is
    * unexpected at this point.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param entity    the name of the entity
    
    * Throws an XMLParseException to indicate that a CDATA section is
    * unexpected at this point.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    
    * Throws an XMLParseException to indicate that a string is not expected
    * at this point.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param unexpectedString the string that is unexpected
    
    * Throws an XMLParseException to indicate that the closing tag of an
    * element does not match the opening tag.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param expectedName the name of the opening tag
    * @param wrongName    the name of the closing tag
    
    * Throws an XMLParseException to indicate that extra data is encountered
    * in a closing tag.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    
    * Throws an XMLValidationException to indicate that an element is missing.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param parentElementName the name of the parent element
    * @param missingElementName the name of the missing element
    
attributeName
attributeValue
    * Throws an XMLValidationException to indicate that an element is
    * unexpected.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param parentElementName the name of the parent element
    * @param unexpectedElementName the name of the unexpected element
    
attributeName
attributeValue
    * Throws an XMLValidationException to indicate that an attribute is
    * missing.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param elementName    the name of the element
    * @param attributeName  the name of the missing attribute
    
attributeValue
    * Throws an XMLValidationException to indicate that an attribute is
    * unexpected.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param elementName    the name of the element
    * @param attributeName  the name of the unexpected attribute
    
attributeValue
    * Throws an XMLValidationException to indicate that an attribute has an
    * invalid value.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param elementName    the name of the element
    * @param attributeName  the name of the attribute
    * @param attributeValue the value of that attribute
    
    * Throws an XMLValidationException to indicate that a #PCDATA element was
    * missing.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param parentElementName the name of the parent element
    
elementName
attributeName
attributeValue
    * Throws an XMLValidationException to indicate that a #PCDATA element was
    * unexpected.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param parentElementName the name of the parent element
    
elementName
attributeName
attributeValue
    * Throws an XMLValidationException.
    *
    * @param systemID       the system ID of the data source
    * @param lineNr         the line number in the data source
    * @param message        the error message
    * @param elementName    the name of the element
    * @param attributeName  the name of the attribute
    * @param attributeValue the value of that attribute
    
